// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        tilingOffset:   { value: [1, 1, 0, 0] }
        startPos:       { value: [0, 0] }
        textureWidth:   { value: 600 }
        speed:          { value: 10 }
        amplitude:      { value: 5 }
        wave:           { value: 5 }
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

// CCProgram unlit-vs %{
//   precision mediump float;
//   #include <cc-global>
//   #include <cc-local-batch>
//   #include <input>

//   highp vec4 vert () {
//     vec4 position;
//     CCVertInput(position);

//     highp mat4 matWorld;
//     CCGetWorldMatrix(matWorld);

//     highp vec4 pos = cc_matProj * (cc_matView * matWorld) * position;

//     return pos;
//   }
// }%

CCProgram unlit-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <cc-local>
  #include <input>

  #if USE_VERTEX_COLOR
    in vec4 a_color;
    out vec4 v_color;
  #endif

  #if USE_TEXTURE
    in vec2 a_texCoord;
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif

  #if USE_FLAG

    uniform LAMYOUMG_COM {
      vec2 startPos;
      float textureWidth;
      float speed;
      float amplitude;
      float wave;
    };
  #endif


  highp vec4 vert () {
    vec4 position;
    CCVertInput(position);

    highp mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    #if USE_FLAG
      float angleSpanH = wave * 3.14159265;
      float pz = amplitude * sin(cc_time.x * speed - (a_position.x - startPos.x + a_position.y - startPos.y) / textureWidth * angleSpanH);
      // vec4 position_e = vec4(position.x, position.y + pz, position.z, 1);
      vec4 position_e = vec4(position.x, position.y , position.z + pz, 1); // use in 3d
      position = position_e;
    #endif

    highp vec4 pos = cc_matProj * (cc_matView * matWorld) * position;

    #if USE_TEXTURE
      v_uv = a_texCoord;
      #if FLIP_UV
        v_uv.y = 1.0 - v_uv.y;
      #endif
      v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    return pos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <output>

  in vec2 v_uv;
  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {
    return CCFragOutput(mainColor * texture(mainTexture, v_uv));
  }
}%
