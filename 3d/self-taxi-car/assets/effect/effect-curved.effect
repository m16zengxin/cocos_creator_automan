// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        tilingOffset: { value: [1, 1, 0, 0] }
        allOffset:      { value: [0, -10, 0, 0] }
        dist:           { value: 100}
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram general-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input>

  #if USE_VERTEX_COLOR
    in vec4 a_color;
    out vec4 v_color;
  #endif

  #if USE_TEXTURE
    in vec2 a_texCoord;
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif

  #if USE_CURVED
    uniform Curved {
      vec4 allOffset;
      float dist;
    };
  #endif

  highp vec4 vert () {
    vec4 position;
    CCVertInput(position);

    highp mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    // highp vec4 pos = cc_matProj * (cc_matView * matWorld) * position;

    highp vec4 vpos = cc_matView * matWorld * position;

    #if USE_CURVED
      highp float zOff = vpos.z / dist;
      vpos += allOffset * zOff * zOff;
    #endif

    highp vec4 pos = cc_matProj * vpos;

    #if USE_TEXTURE
      v_uv = a_texCoord;
      #if FLIP_UV
        v_uv.y = 1.0 - v_uv.y;
      #endif
      v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    return pos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <output>

  in vec2 v_uv;
  uniform sampler2D mainTexture;

  #if USE_COLOR
  uniform Constant {
    vec4 mainColor;
  };
  #endif

  vec4 frag () {
    // return CCFragOutput(mainColor * texture(mainTexture, v_uv));

    vec4 o = vec4(1, 1, 1, 1);
    // vec2 realPos = v_uv;
    // #if USE_MOSAIC
    // realPos = getUvMapPos();
    // #endif

    #if USE_TEXTURE
    o *= texture(mainTexture, v_uv);
    #endif

    #if USE_COLOR
      o *= mainColor;
    #endif

    // #if USE_VERTEX_COLOR
    //   o *= v_color;
    // #endif

    return CCFragOutput(o);
  }
}%
